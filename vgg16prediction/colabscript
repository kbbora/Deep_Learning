import numpy as np
import pandas as pd
from sklearn.metrics import classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator


test_dir = '/content/drive/MyDrive/VGG-16 /image_classification/data/weather_class/test'


image_size = (224, 224)  
batch_size = 32

test_datagen = ImageDataGenerator(rescale=1.0/255.0)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=image_size,
    batch_size=batch_size,
    class_mode='categorical',
    shuffle=False  
)

best_model = tf.keras.models.load_model('best_model1.keras')

predictions = best_model.predict(test_generator)
predicted_classes = np.argmax(predictions, axis=1)
true_classes = test_generator.classes
class_labels = list(test_generator.class_indices.keys())

# sınıflandırma raporu/ istemediğim bilgileri kaldırdım
report = classification_report(true_classes, predicted_classes, target_names=class_labels, output_dict=True)
report_df = pd.DataFrame(report).transpose()
report_df = report_df.drop(['macro avg', 'weighted avg', 'support'], errors='ignore')

#rapordaki support sütununu kaldrdm
if 'support' in report_df.columns:
    report_df = report_df.drop(columns=['support'])

print("Classification Report:")
print(report_df)

# conf. matrix
conf_matrix = confusion_matrix(true_classes, predicted_classes)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=class_labels, yticklabels=class_labels)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

# doğrulukoranı
overall_accuracy = np.trace(conf_matrix) / np.sum(conf_matrix)
print(f"Overall Test Accuracy: {overall_accuracy * 100:.2f}%")

report_df.to_csv('classification_report.csv', index=True)


display(report_df)
